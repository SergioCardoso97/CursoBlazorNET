@using Entities
@using Business
@inject IJSRuntime _js
<hr />
<select class="form-control" @onchange="CategoryChanged">
    <option value="n">Ver Todos los Productos</option>
    @foreach (var category in categories)
    {
        <option value="@category.CategoryId">@category.CategoryName</option>
    }
</select>
<hr />
<table class="table table-dark table-hover table-bordered">
    <thead>
        <tr>
            <th>Referencia</th>
            <th>Nombre producto</th>
            <th>Cantidad del producto.</th>
            <th>Categoria</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var product in tempProducts)
        {
            <tr>
                <td>@product.ProductId</td>
                <td>@product.ProductName</td>
                <td>@product.TotalQuantity</td>
                <td>@product.Category.CategoryName</td>
                <td><a class="mr-2 btn btn-primary" href="product/update/@product.ProductId">Actualizar</a> <button class="btn btn-danger"  onclick="DeleteProduct(@product)">Eliminar</button></td>
            </tr>
        }
    </tbody>
</table>
@message

@code
{
    List<Product> products = new List<Product>();
    List<Product> tempProducts = new List<Product>();
    List<Category> categories = new List<Category>();
    B_Category bCategory = new B_Category();
    B_Product bProduct = new B_Product();
    string message;
    protected override async Task OnInitializedAsync()
    {
        products = bProduct.ProductList();
        tempProducts = products;
        categories = bCategory.CategoryList();
    }
    private void CategoryChanged(ChangeEventArgs e)
    {
        tempProducts = products.Where(x => x.CategoryId == e.Value.ToString()).ToList();
    }
    protected void DeleteProduct(Product product)
    {
        //bProduct.DeleteProduct(product);
    }
}
